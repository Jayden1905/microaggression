import { type NextPage } from 'next'
import Head from 'next/head'
import { type ChangeEvent, useRef, useState, type FormEvent } from 'react'
import { CheckBox } from '~/components/checkbox'

import { api } from '~/utils/api'

type FormProps = {
  category: string[]
  otherCategory?: string
  experience: string
  comment?: string
}

const Home: NextPage = () => {
  const checkboxRef = useRef<HTMLInputElement>(null)
  const formRef = useRef<HTMLFormElement>(null)

  const [checkValues, setCheckValues] = useState<string[]>([])

  const [formData, setFormData] = useState<FormProps>({
    category: [],
    otherCategory: '',
    experience: '',
    comment: '',
  })

  const [onSubmit, setOnSubmit] = useState<boolean>(false)

  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value as unknown as string
    if (event.target.checked) {
      setCheckValues([...checkValues, value])
      setFormData({ ...formData, category: [...checkValues, value] })
    } else {
      setCheckValues(checkValues.filter((v) => v !== value))
      setFormData({
        ...formData,
        category: checkValues.filter((v) => v !== value),
      })
    }
  }
  const resetFormData = () => {
    setFormData({
      category: [],
      otherCategory: '',
      experience: '',
      comment: '',
    })

    setCheckValues([])
  }

  const createForm = api.form.submit.useMutation({
    onSuccess: () => {
      setOnSubmit(false)
      resetFormData()
      formRef.current?.reset()
    },
  })

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault()

    createForm.mutate({
      ...formData,
    })

    setOnSubmit(true)
  }

  const { data: categories } = api.categories.getCategories.useQuery()

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        {categories && (
          <>
            <div className='mx-auto mb-10 max-w-4xl px-3 pt-4'>
              <h1 className='text-4xl font-semibold text-primary'>
                Microaggression in Healthcare Examples Database
              </h1>
              <form className='mt-4' ref={formRef} onSubmit={handleSubmit}>
                <label htmlFor='category' className='text-xl tracking-wider'>
                  1. What&apos;s the category of microaggression you&apos;d like
                  to report?
                  <span className='text-error'>*</span>
                </label>
                {categories.map((category) => (
                  <CheckBox
                    key={category.id}
                    category={category}
                    checkboxRef={checkboxRef}
                    onChange={handleCheckboxChange}
                    checkboxValues={checkValues}
                  />
                ))}
                <div className='form-control w-full'>
                  <label className='label'>
                    <span className='label-text text-xl'>
                      2. If you chose Other, please state your category.
                    </span>
                  </label>
                  <input
                    type='text'
                    placeholder='Enter your answer'
                    className='input-bordered input w-full max-w-xs'
                    disabled={!checkValues.includes('Other')}
                    onChange={(e: ChangeEvent<HTMLInputElement>) => {
                      setFormData({
                        ...formData,
                        otherCategory: e.target.value,
                      })
                    }}
                  />
                </div>
                <div className='form-control w-full'>
                  <label className='label'>
                    <span className='label-text text-xl'>
                      3. Please share your experience.
                      <span className='text-error'>*</span>
                    </span>
                  </label>
                  <textarea
                    required
                    className='textarea-bordered textarea text-[16px]'
                    placeholder='Enter your answer'
                    onChange={(e: ChangeEvent<HTMLTextAreaElement>) => {
                      setFormData({
                        ...formData,
                        experience: e.target.value,
                      })
                    }}
                  ></textarea>
                </div>
                <div className='form-control w-full'>
                  <label className='label'>
                    <span className='label-text text-xl'>
                      4. Anything else you want to comment on?
                    </span>
                  </label>
                  <textarea
                    className='textarea-bordered textarea text-[16px]'
                    placeholder='Enter your answer'
                    onChange={(e: ChangeEvent<HTMLTextAreaElement>) => {
                      setFormData({
                        ...formData,
                        comment: e.target.value,
                      })
                    }}
                  ></textarea>
                </div>
                <button
                  type='submit'
                  className={`btn-wide btn ${
                    onSubmit ? 'loading' : ''
                  } mt-4 text-lg normal-case`}
                >
                  {onSubmit ? 'Submitting...' : 'Submit'}
                </button>
              </form>
            </div>
          </>
        )}
      </main>
    </>
  )
}

export default Home
